from django.test import TestCase
from django.contrib.auth.models import User
from .models import Market, Ticker, Wallet, WalletRecord
from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.urls import reverse
from .models import Market, Ticker, Wallet, WalletRecord
from .trade_logic import *
from .views import create_chart
from unittest.mock import patch
from .data_downloaders import alphavantage_data
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

test_ticker_info_obj = alphavantage_data.TickerInfo(
    ticker="T1",
    company_name="Company1",
    description="Info1",
    currency="USD",
    country="USA",
    sector="Sector1",
    industry="Industry1",
    exchange="Exchange1",
    address="Address1",
    capitalization=1000
)

class ModelTests(TestCase):

    def setUp(self):

        self.user = User.objects.create_user(username="testuser", password="testpassword")
        self.wallet = Wallet.objects.create(owner=self.user, name="Test Wallet")

        self.market = Market.objects.create(name='Test Market')
        self.market_empty = Market.objects.create(name='Test Market Empty')
        self.ticker_1 = Ticker.objects.create(ticker_name='T1', origin_market=self.market)
        self.ticker_2 = Ticker.objects.create(ticker_name='T2', origin_market=self.market)


    def test_market_str(self):
        self.assertEqual(str(self.market), "Test Market")


    def test_ticker_str(self):
        self.assertEqual(str(self.ticker_1), "T1")


    def test_wallet_str(self):
        self.assertEqual(str(self.wallet), "Test Wallet")


    def test_walletrecord_str(self):
        wallet_record = WalletRecord.objects.create(name="Test Record", wallet=self.wallet, ticker=self.ticker_1)
        self.assertEqual(str(wallet_record), "Test Record")


    def test_wallet_name_autogenerated(self):
        new_wallet = Wallet.objects.create(owner=self.user)
        self.assertEqual(new_wallet.name, f"{self.user.username}_wallet")


    def test_walletrecord_name_autogenerated(self):
        wallet_record = WalletRecord.objects.create(wallet=self.wallet, ticker=self.ticker_1)
        self.assertEqual(wallet_record.name, self.ticker_1.company_name)


    def test_wallet_pre_save_signal(self):
        new_wallet = Wallet(owner=self.user)
        new_wallet.save()
        self.assertEqual(new_wallet.name, f"{self.user.username}_wallet")


    def test_market_description_default(self):
        market = Market.objects.create(name="Test Market 2")
        self.assertEqual(market.description, '')


    def test_ticker_download_data(self):
        with patch('getstocksapp.models.get_ticker_info_obj', return_value=test_ticker_info_obj) as mock_get_prices:
            ticker = Ticker.objects.create(ticker_name="T3", origin_market=self.market)
            ticker.download_data()
            self.assertEqual(ticker.company_name, "Company1")
            self.assertEqual(ticker.currency, "USD")


    def test_walletrecord_creation_time(self):
        ticker = Ticker.objects.create(ticker_name="AAPL", origin_market=self.market)
        wallet_record = WalletRecord.objects.create(wallet=self.wallet, ticker=ticker)
        self.assertIsNotNone(wallet_record.creation_time)


    def test_wallet_guests(self):
        guest_user = User.objects.create_user(username="guestuser", password="guestpassword")
        self.wallet.guests.add(guest_user)
        self.assertIn(guest_user, self.wallet.guests.all())


    def test_market_str_unicode(self):
        market = Market.objects.create(name="Test Market €")
        self.assertEqual(str(market), "Test Market €")


    def test_walletrecord_quantity_default(self):
        ticker = Ticker.objects.create(ticker_name="T4", origin_market=self.market)
        wallet_record = WalletRecord.objects.create(wallet=self.wallet, ticker=ticker)
        self.assertEqual(wallet_record.quantity, 1)


    def test_ticker_capitalization_type(self):
        ticker = Ticker.objects.create(ticker_name="T5", origin_market=self.market)
        self.assertIsInstance(ticker.capitalization, int)


    def test_walletrecord_init_price_default(self):
        ticker = Ticker.objects.create(ticker_name="T6", origin_market=self.market)
        wallet_record = WalletRecord.objects.create(wallet=self.wallet, ticker=ticker)
        self.assertEqual(wallet_record.init_price, 0.0)


class ViewsTestCase(TestCase):

    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(username='testuser', password='testpassword')
        self.market = Market.objects.create(name='Test Market')
        self.market_empty = Market.objects.create(name='Test Market Empty')
        self.ticker = Ticker.objects.create(ticker_name='ABC', origin_market=self.market)
        self.wallet_1 = Wallet.objects.create(owner=self.user, name='Test Wallet_1')
        self.wallet_record_1 = WalletRecord.objects.create(name='Record 1', wallet=self.wallet_1, ticker=self.ticker)
        self.wallet_2 = Wallet.objects.create(owner=self.user, name='Test Wallet_2')
        self.wallet_record_2 = WalletRecord.objects.create(name='Record 2', wallet=self.wallet_2, ticker=self.ticker)
        self.wallet_2.guests.add(self.user)
        self.client.login(username='testuser', password='testpassword')

    def test_index_view(self):
        response = self.client.get(reverse('getstocksapp:home'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'POPULAR STOCKS:')


    def test_market_review_view(self):
        response = self.client.get(reverse('getstocksapp:marketreview', kwargs={'pk': self.market.pk}))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, self.market.name)


    def test_market_review_view(self):
        response = self.client.get(reverse('getstocksapp:marketreview', kwargs={'pk': self.market_empty.pk}))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "No tickers available for this market yet.")


    def test_ticker_review_view(self):
        response = self.client.get(reverse('getstocksapp:tickerreview', kwargs={'pk': self.ticker.pk}))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Financial Data unavailble')


    def test_csv_upload_view(self):
        response = self.client.get(reverse('getstocksapp:upload-csv'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Send CSV file')


    def test_about_us_view(self):
        response = self.client.get(reverse('getstocksapp:about-us'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'About Us')


    def test_advisor_info_view(self):
        response = self.client.get(reverse('getstocksapp:advisor-info'))
        self.assertEqual(response.status_code, 200)


    def test_registration_view(self):
        response = self.client.get(reverse('getstocksapp:registration'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Registration')


    def test_user_profile_edit_view(self):
        response = self.client.get(reverse('getstocksapp:profile-edit', kwargs={'pk': self.user.pk}))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Edit Profile')
        

    def test_profile_view(self):
        response = self.client.get(reverse('getstocksapp:profile', kwargs={'pk': self.user.pk}))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, self.user)
        self.assertContains(response, self.wallet_1)
        self.assertContains(response, self.wallet_2)


    def test_wallet_view(self):
        with patch('getstocksapp.views.get_prices_of_many_tickers', return_value=[150.0]) as mock_get_prices:
            response = self.client.get(reverse('getstocksapp:wallet', kwargs={'pk': self.wallet_1.pk}))
            mock_get_prices.assert_called_once()
            self.assertEqual(response.status_code, 200)
            self.assertContains(response, self.wallet_1)
            self.assertContains(response, self.wallet_record_1)


class StrategyTestCase(TestCase):
    start_date = datetime(2022, 1, 1)
    end_date = datetime(2022, 12, 31)
    date_range = pd.date_range(start=start_date, end=end_date)

    test_df_1 = pd.DataFrame(index=date_range)
    test_df_1['Close'] = 1000 - test_df_1.index.to_series().sub(test_df_1.index.to_series().min()).dt.days

    test_df_2 = pd.DataFrame(index=date_range)
    test_df_2['Close'] = 1000 + test_df_2.index.to_series().sub(test_df_2.index.to_series().min()).dt.days

    test_df_3 = pd.DataFrame(index=date_range)
    test_df_3['Close'] = 1000   


